name: Frontend Tests and Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

jobs:
  # 代码质量检查
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: TypeScript type check
        run: npm run type-check

  # 单元测试和集成测试
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results.xml

      - name: Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          npm run test:coverage:check

  # E2E测试
  e2e-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
        viewport: [desktop, tablet, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Cache Cypress binary
        uses: actions/cache@v3
        with:
          path: ${{ env.CYPRESS_CACHE_FOLDER }}
          key: cypress-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-

      - name: Install Cypress
        run: npx cypress install

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          browser: ${{ matrix.browser }}
          config: viewportWidth=1280,viewportHeight=720
          spec: cypress/e2e/**/*.cy.js
        env:
          CYPRESS_VIEWPORT: ${{ matrix.viewport }}
          CYPRESS_BASE_URL: http://localhost:3000

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.browser }}-${{ matrix.viewport }}
          path: cypress/screenshots

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-${{ matrix.browser }}-${{ matrix.viewport }}
          path: cypress/videos

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-reports-${{ matrix.browser }}-${{ matrix.viewport }}
          path: cypress/reports

  # 无障碍性测试
  accessibility-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:3000

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-reports
          path: accessibility-reports/

  # 性能测试
  performance-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run preview &
          npx wait-on http://localhost:3000

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run performance tests
        run: npm run test:performance

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            lighthouse-reports/
            performance-reports/

  # 构建验证
  build-verification:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Verify build output
        run: |
          ls -la dist/
          echo "Build verification completed"

      - name: Test production build
        run: |
          npm run preview &
          npx wait-on http://localhost:3000
          curl -f http://localhost:3000 || exit 1

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # 依赖更新检查
  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for outdated dependencies
        run: |
          npm outdated || true
          echo "Dependency check completed"

      - name: Check bundle size
        run: |
          npm ci
          npm run build
          npm run bundle-analyzer

  # 测试报告汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, accessibility-tests, performance-tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# Test Summary Report" > test-summary.md
          echo "" >> test-summary.md
          echo "## Test Results" >> test-summary.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> test-summary.md
          echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md

      - name: Upload test summary
        uses: actions/upload-artifact@v4
        with:
          name: test-summary
          path: test-summary.md

  # 部署到预发布环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, e2e-tests, build-verification]
    if: github.ref == 'refs/heads/develop' && success()
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build:staging
        env:
          VITE_API_BASE_URL: ${{ secrets.STAGING_API_URL }}
          VITE_APP_ENV: staging

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # 这里添加实际的部署命令
          # 例如: aws s3 sync dist/ s3://staging-bucket

      - name: Run smoke tests
        run: npm run test:smoke:staging

  # 部署到生产环境
  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, e2e-tests, accessibility-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/main' && success()
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build:production
        env:
          VITE_API_BASE_URL: ${{ secrets.PRODUCTION_API_URL }}
          VITE_APP_ENV: production

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # 这里添加实际的部署命令

      - name: Run production smoke tests
        run: npm run test:smoke:production

      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully!"
          # 这里可以添加通知逻辑，如Slack、邮件等

  # 清理工件
  cleanup:
    runs-on: ubuntu-latest
    needs: [test-summary, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Cleanup old artifacts
        run: |
          echo "Cleaning up old test artifacts..."
          # 清理逻辑
